# -*- coding: utf-8 -*-
"""nfc_project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HAoaOTnub2InYRSP5_BdGFg_il-fEs8D
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
!/usr/local/cuda/bin/nvcc --version
!git clone https://github.com/shivagowrinfc/background_removal
# %cd /content/background_removal
print('making images directory')
!mkdir images
print('making results directory')
!mkdir results
print('importing...')
from google.colab import files
import os
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.preprocessing.image import img_to_array
import numpy as np
from PIL import Image as Img
import cv2
from google.colab.patches import cv2_imshow
print('Done!')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/background_removal/images
uploaded = files.upload()

# %cd /content/background_removal

!python -W ignore u2net_test.py

image_dir = os.path.join(os.getcwd(), 'images')
names = [name[:-4] for name in os.listdir(image_dir)]
names

name = names[0]
name

output = load_img('/content/U-2-Net/results/'+name+'.png')
display(output)

RESCALE = 255
out_img = img_to_array(output)
out_img /= RESCALE
import matplotlib.pyplot as plt
plt.imshow(out_img)

THRESHOLD = 0.9

out_img[out_img > THRESHOLD] = 1
out_img[out_img <= THRESHOLD] = 0
plt.imshow(out_img)

shape = out_img.shape

a_layer_init = np.ones(shape = (shape[0],shape[1],1))

mul_layer = np.expand_dims(out_img[:,:,0],axis=2)
a_layer = mul_layer*a_layer_init
rgba_out = np.append(out_img,a_layer,axis=2)
display(Img.fromarray((rgba_out*RESCALE).astype('uint8'), 'RGBA'))

input = load_img('/content/U-2-Net/images/'+name+'.jpg')
inp_img = img_to_array(input)
inp_img /= RESCALE
plt.imshow(inp_img)

a_layer = np.ones(shape = (shape[0],shape[1],1))
rgba_inp = np.append(inp_img,a_layer,axis=2)
plt.imshow(rgba_inp)

rem_back = (rgba_inp*rgba_out)
rem_back_scaled = Img.fromarray((rem_back*RESCALE).astype('uint8'), 'RGBA')
display(rem_back_scaled)

